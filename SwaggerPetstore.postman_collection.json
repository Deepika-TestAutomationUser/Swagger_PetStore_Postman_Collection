{
	"info": {
		"_postman_id": "1702465d-81aa-4886-b5fa-ba67988b90d6",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Cases For Pet Store User Management",
			"item": [
				{
					"name": "Create user - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": -8953393,\n    \"username\": \"dolor ex ea\",\n    \"firstName\": \"Duis voluptat\",\n    \"lastName\": \"enim fug\",\n    \"email\": \"velit dolore ex amet\",\n    \"password\": \"ex nostrud\",\n    \"phone\": \"ea\",\n    \"userStatus\": 62409912\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(pm.response.text()).to.include(\"message\",\"ok\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"ok\").to.equal(response.message)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": -27661206,\n        \"username\": \"in nulla\",\n        \"firstName\": \"Lorem irure laboris reprehenderit\",\n        \"lastName\": \"in eu\",\n        \"email\": \"culpa in \",\n        \"password\": \"id dolor ullamco\",\n        \"phone\": \"ut exercitation\",\n        \"userStatus\": 22936523\n    },\n    {\n        \"id\": 69102800,\n        \"username\": \"deserunt ex ut id\",\n        \"firstName\": \"cupidatat exercitation veniam\",\n        \"lastName\": \"in nost\",\n        \"email\": \"incididunt\",\n        \"password\": \"aliqua enim\",\n        \"phone\": \"voluptate laborum\",\n        \"userStatus\": -39356448\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithArray",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"ok\").to.equal(response.message)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": 7511956,\n        \"username\": \"deserunt nu\",\n        \"firstName\": \"ut sunt in aliqua\",\n        \"lastName\": \"veniam nostrud in ut\",\n        \"email\": \"amet ullamco\",\n        \"password\": \"aliqua\",\n        \"phone\": \"non et sunt\",\n        \"userStatus\": 66729484\n    },\n    {\n        \"id\": 50299938,\n        \"username\": \"exercitati\",\n        \"firstName\": \"ullamco laboris minim consectetur non\",\n        \"lastName\": \"cillum laboris\",\n        \"email\": \"culpa sint\",\n        \"password\": \"aliquip mollit id nisi\",\n        \"phone\": \"amet\",\n        \"userStatus\": -13309679\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/createWithList",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs user into the system - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Data Validation\", function () {\r",
									" var jsonData = JSON.parse(responseBody);\r",
									" pm.expect(\"logged in user session:\").to.contains(jsonData.message)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=consequat labore&password=consequat labore",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "consequat labore",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "consequat labore",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs user into the system - 400 Bad Request Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"bad input\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=consequat labore&password=$%^%%26*^(*",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "consequat labore",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "$%^%%26*^(*",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs out current logged in user session - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"ok\").to.equal(response.message)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Finds Pets by tags - 200 Ok Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByTags?tags=ad ipsum",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByTags"
							],
							"query": [
								{
									"key": "tags",
									"value": "ad ipsum",
									"description": "(Required) Tags to filter by"
								},
								{
									"key": "tags",
									"value": "%&£(£)\")",
									"description": "(Required) Tags to filter by",
									"disabled": true
								}
							]
						},
						"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
					},
					"response": []
				},
				{
					"name": "Get user by user name - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"{\r",
									"    \r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"username\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"firstName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"lastName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"email\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"password\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"phone\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userStatus\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            \r",
									"    \r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Schema Validation\", function () {\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Data Validation\", function () {\r",
									" var jsonData = JSON.parse(responseBody);\r",
									" pm.expect(\"dolor ex ea\").to.equal(jsonData.username)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"query": [
								{
									"key": "username",
									"value": "dolor ex ea",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "username",
									"value": "dolor ex ea",
									"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by user name-400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  const htmlresponse = cheerio.load(pm.response.text());\r",
									"  pm.expect(htmlresponse('title').text()).to.equal(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "%$&*%*£^£^(£&O",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by user name-404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"User not found\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "consequat labore",
									"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updated user - 200 Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": -8953393,\n    \"username\": \"dolor ex ea\",\n    \"firstName\": \"Duuins\",\n    \"lastName\": \"enim fug\",\n    \"email\": \"velit dolore ex amet\",\n    \"password\": \"ex nostrud\",\n    \"phone\": \"ea\",\n    \"userStatus\": 62409912\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "dolor ex ea",
									"description": "(Required) name that need to be updated"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Updated user - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  const htmlresponse = cheerio.load(pm.response.text());\r",
									"  pm.expect(htmlresponse('title').text()).to.equal(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": -8953393,\n    \"username\": \"$%&£&£^(£&\",\n    \"firstName\": \"Duis voluptat\",\n    \"lastName\": \"enim fug\",\n    \"email\": \"velit dolore ex amet\",\n    \"password\": \"ex nostrud\",\n    \"phone\": \"ea\",\n    \"userStatus\": 62409912\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "£$^%$&%*&&*^",
									"description": "(Required) name that need to be updated"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Delete user - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"User not found\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "dolor ex eaddda",
									"description": "(Required) The name that needs to be deleted"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Delete user - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  const htmlresponse = cheerio.load(pm.response.text());\r",
									"  pm.expect(htmlresponse('title').text()).to.equal(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "£%$£$%^*&^*(&(",
									"description": "(Required) The name that needs to be deleted"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Cases For Pet Store Stock Management",
			"item": [
				{
					"name": "Finds Pets by status - 400 Bad Request Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"No data\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=£\"£%$^%26^%*%26*^(^(&statusjsdhfjkdsf=available&status=725374236492::@}>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "£\"£%$^%26^%*%26*^(^(",
									"description": "(Required) Status values that need to be considered for filter"
								},
								{
									"key": "statusjsdhfjkdsf",
									"value": "available"
								},
								{
									"key": "status",
									"value": "725374236492::@}>"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status -200 OK Status Available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status - 200 Ok Status UnAvailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(pm.response.text()).to.include(\"name\",\"doggie\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								},
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Update an existing pet- 405 Method Not Allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"no data\").to.equal(response.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing Pet - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"bad input\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\"\n    ],\n    \"id\": -86391577,\n    \"category\": {\n        \"id\": -80613363,\n        \"name\": \"adipisicing dol\"\n    },\n    \"tags\": [\n        {\n            \"id\": 64690398,\n            \"name\": \"qui in ad\"\n        },\n        {\n            \"id\": -53151237,\n            \"name\": \"aliqua aute proident\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing Pet - 400 Bad Request Incorrect Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"bad input\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ullamco incididunt sint sed Excepteur\",\n        \"irure deserunt ad sit\"\n    ],\n    \"id\": -86391577,\n    \"category\": {\n        \"id\": -9ugiui7,\n      \n    },\n    \"tags\": [\n        {\n            \"id\": 64690398,\n            \"name\": \"qui in ad\"\n        },\n        {\n            \"id\": -53151237,\n            \"name\": \"aliqua aute proident\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing Pet - 400 Bad Request Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"bad input\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing Pet - 404 Not Found Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"Pet not found\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ullamco incididunt sint sed Excepteur\",\n        \"irure deserunt ad sit\"\n    ],\n    \"id\": -3456438658349654356345683465436583456,\n    \"category\": {\n        \"id\": -80613363,\n        \"name\": \"adipisicing dol\"\n    },\n    \"tags\": [\n        {\n            \"id\": 64690398,\n            \"name\": \"qui in ad\"\n        },\n        {\n            \"id\": -53151237,\n            \"name\": \"aliqua aute proident\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing Pet - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"adipisicing dol\").to.equal(response.category.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"ullamco incididunt sint sed Excepteur\",\n        \"irure deserunt ad sit\"\n    ],\n    \"id\": -86391577,\n    \"category\": {\n        \"id\": -80613363,\n        \"name\": \"adipisicing dol\"\n    },\n    \"tags\": [\n        {\n            \"id\": 64690398,\n            \"name\": \"qui in ad\"\n        },\n        {\n            \"id\": -53151237,\n            \"name\": \"aliqua aute proident\"\n        }\n    ],\n    \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new pet to the store - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"bad input\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"doggie\",\r\n    \"photoUrls\": [\r\n        \"et ipsum\",\r\n        \"nisi ex ut veniam\"\r\n    ],\r\n    \"id\": -sdjghskdg,\r\n    \"category\": {\r\n        \"id\": 3824508,\r\n        \"name\": \"testnameone\"\r\n    },\r\n    \"tags\": [\r\n        {\r\n            \"id\": -30226309,\r\n            \"name\": \"testnametwo\"\r\n        },\r\n        {\r\n            \"id\": 91420552,\r\n            \"name\": \"testnamethree\"\r\n        }\r\n    ],\r\n    \"status\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns pet inventories by status - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"sold\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"string\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"pending\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"available\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Not Available\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"pm.test(\"Schema Validation\", function () {\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(8).to.equal(response.pending);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": []
				},
				{
					"name": "Add a new pet to the store - 400 Bad Request Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"bad input\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new pet to the store - 405 Method Not Allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"no data\").to.equal(response.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new pet to the store - 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"doggie\").to.equal(response.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"et ipsum\",\n        \"nisi ex ut veniam\"\n    ],\n    \"id\": -54329185,\n    \"category\": {\n        \"id\": 3824508,\n        \"name\": \"testnameone\"\n    },\n    \"tags\": [\n        {\n            \"id\": -30226309,\n            \"name\": \"testnametwo\"\n        },\n        {\n            \"id\": 91420552,\n            \"name\": \"testnamethree\"\n        }\n    ],\n    \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"$ref\": \"#/definitions/Category\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"photoUrls\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"tags\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"$ref\": \"#/definitions/Category\"\r",
									"      }\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"Category\": {\r",
									"    \"type\": \"object\",\r",
									"    \"additionalProperties\": false,\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"name\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"}\r",
									"pm.test(\"Schema Validation\", function () {\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(\"testnameone\").to.equal(response.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-55374257",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": []
				},
				{
					"name": "Find pet by ID - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"Pet not found\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-55374257",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": []
				},
				{
					"name": "Find pet by ID - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  const htmlresponse = cheerio.load(pm.response.text());\r",
									"  pm.expect(htmlresponse('title').text()).to.equal(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "<API Key>",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-^%&*%&*^(&*",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": []
				},
				{
					"name": "Updates a pet in the store with form data - 200 Ok Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Validation\", function () {\r",
									"    const response = pm.response.json();\r",
									"   pm.expect(pm.response.text()).to.include(\"message\",\"not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "dolor labore nisi",
									"description": "Updated name of the pet"
								},
								{
									"key": "status",
									"value": "veniam",
									"description": "Updated status of the pet"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-55374257",
									"description": "(Required) ID of pet that needs to be updated"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes a pet - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"Pet not found\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "consequat labore"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-55374257",
									"description": "(Required) Pet id to delete"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes a pet - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  const htmlresponse = cheerio.load(pm.response.text());\r",
									"  pm.expect(htmlresponse('title').text()).to.equal(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "consequat labore"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-%$&%&^*",
									"description": "(Required) Pet id to delete"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Uploads an image - 200 OK Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "ea tempor",
									"description": "Additional data to pass to server",
									"type": "text"
								},
								{
									"key": "file",
									"description": "file to upload",
									"type": "file",
									"src": "891ZC2Hxj/one.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId",
								"uploadImage"
							],
							"variable": [
								{
									"key": "petId",
									"value": "-55374257",
									"description": "(Required) ID of pet to update"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Cases For Pet Store Order Management",
			"item": [
				{
					"name": "Place an order for a pet - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"No data\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place an order for a pet - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"petId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"quantity\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"shipDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"complete\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema Validation\", function () {\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Data Validation\", function () {\r",
									" var jsonData = JSON.parse(responseBody);\r",
									" pm.expect(\"placed\").to.equal(jsonData.status)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"petId\": 8,\n  \"quantity\": 1,\n  \"shipDate\": \"2022-04-07T16:16:11.354Z\",\n  \"status\": \"placed\",\n  \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID - 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = \r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"petId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"quantity\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"shipDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"format\": \"date-time\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"complete\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema Validation\", function () {\r",
									" pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Data Validation\", function () {\r",
									" var jsonData = JSON.parse(responseBody);\r",
									" pm.expect(\"placed\").to.equal(jsonData.status)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "8",
									"description": "(Required) ID of pet that needs to be fetched"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  const htmlresponse = cheerio.load(pm.response.text());\r",
									"  pm.expect(htmlresponse('title').text()).to.equal(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "$%$&^%",
									"description": "(Required) ID of pet that needs to be fetched"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"Order not found\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "8735465934",
									"description": "(Required) ID of pet that needs to be fetched"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": []
				},
				{
					"name": "Delete purchase order by ID - 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  var jsonData = JSON.parse(responseBody);\r",
									"   pm.expect(\"Order Not Found\").to.equal(jsonData.message);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "42650229",
									"description": "(Required) ID of the order that needs to be deleted"
								}
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": []
				},
				{
					"name": "Delete purchase order by ID - 400 Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response Message Validation\", function () {\r",
									"  const htmlresponse = cheerio.load(pm.response.text());\r",
									"  pm.expect(htmlresponse('title').text()).to.equal(\"400 Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "%^&^&*^(*(&",
									"description": "(Required) ID of the order that needs to be deleted"
								}
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}